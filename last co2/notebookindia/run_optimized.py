"""
Script de d√©marrage optimis√© pour r√©duire la latence
"""
import os
import sys
import subprocess
import time

def run_optimized_app():
    """D√©marre l'application avec des optimisations de performance"""
    
    print("üöÄ D√©marrage optimis√© de l'application...")
    
    # V√©rifier si les mod√®les sont pr√©charg√©s
    if not os.path.exists("preload_models.py"):
        print("‚ùå Script de pr√©chargement non trouv√©")
        return
    
    # Pr√©charger les mod√®les
    print("üìö Pr√©chargement des mod√®les...")
    try:
        result = subprocess.run([sys.executable, "preload_models.py"], 
                              capture_output=True, text=True, check=True)
        print("‚úÖ Mod√®les pr√©charg√©s avec succ√®s")
    except subprocess.CalledProcessError as e:
        print(f"‚ö†Ô∏è Erreur lors du pr√©chargement: {e}")
        print("L'application continuera mais sera plus lente au premier d√©marrage")
    
    # D√©marrer l'application avec des optimisations
    print("üåê D√©marrage de l'application Streamlit...")
    print("üí° Utilisez Ctrl+C pour arr√™ter l'application")
    
    # Variables d'environnement pour optimiser les performances
    env = os.environ.copy()
    env["STREAMLIT_SERVER_HEADLESS"] = "true"
    env["STREAMLIT_SERVER_ENABLE_STATIC_SERVING"] = "true"
    env["STREAMLIT_SERVER_ENABLE_CORS"] = "false"
    env["STREAMLIT_SERVER_ENABLE_XSRF_PROTECTION"] = "false"
    
    try:
        # D√©marrer l'application
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", "app.py",
            "--server.port", "8511",
            "--server.headless", "true",
            "--server.enableStaticServing", "true"
        ], env=env)
    except KeyboardInterrupt:
        print("\nüõë Application arr√™t√©e par l'utilisateur")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage: {e}")

if __name__ == "__main__":
    run_optimized_app()
